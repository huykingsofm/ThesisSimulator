import argparse

from hks_pylib.done import Done
from hks_pylib.cryptography.ciphers.keygenerator import KeyGenerator

from _simulator.base.key import MasterKey
from _simulator.base.pdp import ClientPDP
from _simulator.protocol.definition import ThesisProtocols

from simulator.utils import error
from simulator.configuration.client import ClientSimulator


def check(simulator: ClientSimulator, ftoken, key, digest, r, d):
    client = simulator.connect()
    try:
        client.activate(
                ThesisProtocols.CHECK,
                token=ftoken,
                key=key,
                digest=digest,
                r=r,
                d=d
            )

        result = client.wait_result(ThesisProtocols.CHECK, timeout=5)

        if result is None:
            result = Done(False, reason="Timeout")

    except Exception as e:
        result = Done(False, reason=str(e))
    finally:
        client.close()

    if result:
        return result

    return error(result)


class Check:
    def __init__(self, parser: argparse.ArgumentParser):
        self.parser = parser

        self.parser.add_argument(
                "token",
                help="The file token which you "
                "want to check the integrity. "
            )

        self.parser.add_argument(
                "metafile",
                help="The json file path contains proofs of the file. "
                "It is generated by pdp command."
            )

        self.parser.add_argument(
                "--password",
                "-p",
                help="The password which you use to generate proofs.",
                default=None
            )

        self.parser.add_argument(
                "--index",
                "-i",
                help="The index of the proof.",
                type=int,
                default=None
            )

        self.parser.add_argument(
                "--remove",
                "-r",
                help="Remove the proof in metafile after checking.",
                action="store_true"
            )

    def run(self, args):
        simulator = ClientSimulator(args.client, args.channel)

        if args.index is None:
            raise Exception("Index is required")

        key = KeyGenerator(32).pwd2key(args.password)
        master_key = MasterKey(key)

        session_key = master_key.derive(args.index)

        try:
            metadata = ClientPDP.pick(args.metafile, args.index)
        except KeyError:
            raise Exception("The index is not found.")

        r, d, digest = metadata["r"], metadata["d"], metadata["digest"]

        if args.remove:
            ClientPDP.remove(args.metafile, args.index)

        result = check(simulator, args.token, session_key, digest, r, d)

        if result:
            print("The file is integrated.")
        else:
            print(result.error)
